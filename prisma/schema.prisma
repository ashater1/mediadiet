generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @db.Uuid
  createdAt     DateTime?       @default(now()) @map("created_date")
  bio           String?
  email         String?
  firstName     String?         @map("first_name")
  lastName      String?         @map("last_name")
  username      String          @unique
  avatar        String?
  BookForLater  BookForLater[]
  BookReviews   BookReview[]
  MovieForLater MovieForLater[]
  MovieReviews  MovieReview[]
  ShowForLater  ShowForLater[]
  TvReviews     TvReview[]
  user_A        User[]          @relation("UserFollows")
  user_B        User[]          @relation("UserFollows")

  @@map("user")
}

model BookReview {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  consumedDate DateTime  @default(now()) @map("consumed_date") @db.Date
  favorited    Boolean?
  review       String?
  bookId       String
  audiobook    Boolean   @default(false)
  createdAt    DateTime? @default(now()) @map("created_date")
  userId       String    @map("user_id") @db.Uuid
  stars        Int?
  book         Book      @relation(fields: [bookId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@map("book_review")
}

model Author {
  name  String
  id    String @id @unique
  books Book[] @relation("AuthorToBook")

  @@map("author")
}

model Book {
  id            String         @id @unique
  title         String
  publishedDate DateTime?      @map("published_date") @db.Date
  isbn10        String?        @map("isbn_10")
  isbn13        String?        @map("isbn_13")
  coverId       String?        @map("cover_id")
  BookForLater  BookForLater[]
  BookReview    BookReview[]
  authors       Author[]       @relation("AuthorToBook")

  @@map("book")
}

model MovieReview {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  consumedDate DateTime  @default(now()) @map("consumed_date") @db.Date
  favorited    Boolean?
  review       String?
  movieId      String
  inTheater    Boolean?  @default(false) @map("in_theater")
  onPlane      Boolean?  @default(false) @map("on_plane")
  createdAt    DateTime? @default(now()) @map("created_date")
  userId       String    @db.Uuid
  stars        Int?
  movie        Movie     @relation(fields: [movieId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@map("movie_review")
}

model Director {
  id     String  @id @unique
  name   String?
  movies Movie[] @relation("DirectorToMovie")

  @@map("director")
}

model Movie {
  id            String          @id @unique
  title         String
  releasedYear  Int?            @map("released_year")
  posterPath    String?         @map("poster_path")
  MovieForLater MovieForLater[]
  MovieReview   MovieReview[]
  directors     Director[]      @relation("DirectorToMovie")

  @@map("movie")
}

model TvReview {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  consumedDate DateTime  @default(now()) @map("consumed_date") @db.Date
  favorited    Boolean?
  review       String?
  tvSeasonId   String
  createdAt    DateTime? @default(now()) @map("created_date")
  userId       String    @db.Uuid
  stars        Int?
  tvSeason     TvSeason  @relation(fields: [tvSeasonId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@map("tv_review")
}

model TvShow {
  id           String         @id @unique
  title        String?
  ShowForLater ShowForLater[]
  seasons      TvSeason[]
  studio       Studio[]       @relation("StudioToTvShow")

  @@map("tv_show")
}

model TvSeason {
  id           String     @id @unique
  title        String?
  airDate      DateTime?  @db.Date
  seasonNumber Int?       @map("season_number")
  posterPath   String?    @map("poster_path")
  tvShowId     String
  TvReview     TvReview[]
  tvShow       TvShow     @relation(fields: [tvShowId], references: [id])

  @@map("tv_season")
}

model Studio {
  id    String   @id @unique
  name  String?
  shows TvShow[] @relation("StudioToTvShow")

  @@map("studio")
}

model BookForLater {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId  String
  userId  String   @db.Uuid
  addedAt DateTime @default(now()) @map("created_date")
  book    Book     @relation(fields: [bookId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@unique([bookId, userId])
  @@map("book_for_later")
}

model MovieForLater {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  movieId String
  userId  String   @db.Uuid
  addedAt DateTime @default(now()) @map("created_date")
  movie   Movie    @relation(fields: [movieId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@unique([movieId, userId])
  @@map("movie_for_later")
}

model ShowForLater {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tvShowId String
  userId   String   @db.Uuid
  addedAt  DateTime @default(now()) @map("created_date")
  tvShow   TvShow   @relation(fields: [tvShowId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([tvShowId, userId])
  @@map("show_for_later")
}
