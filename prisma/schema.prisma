generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  BOOK
  MOVIE
  TV

  @@map("mediatype")
}

model User {
  id                String              @id @db.Uuid
  createdAt         DateTime?           @default(now()) @map("created_date")
  bio               String?
  email             String?
  firstName         String?             @map("first_name")
  lastName          String?             @map("last_name")
  username          String              @unique
  avatar            String?
  soderberghMode    Boolean             @default(false) @map("soderbergh_mode")
  followedBy        Follows[]           @relation("followedBy")
  following         Follows[]           @relation("following")
  MediaItemForLater MediaItemForLater[]
  Review            Review[]

  @@map("user")
}

model Follows {
  createdAt  DateTime @default(now()) @map("created_date")
  followed   User     @relation("followedBy", fields: [followedId], references: [id])
  followedId String   @db.Uuid
  follower   User     @relation("following", fields: [followerId], references: [id])
  followerId String   @db.Uuid

  @@id([followedId, followerId])
  @@map("follows")
}

model MediaItem {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  apiId             String              @unique @map("api_id")
  mediaType         MediaType           @map("media_type")
  title             String
  releaseDate       DateTime?           @map("release_date") @db.Date
  coverArt          String?             @map("cover_art")
  length            Int?
  creator           Creator[]           @relation("MediaItemToCreator")
  MediaItemForLater MediaItemForLater[]
  TvSeries          TvSeries?           @relation(fields: [tvSeriesId], references: [id])
  tvSeriesId        String?             @map("tv_series_id") @db.Uuid
  Review            Review[]

  @@unique([apiId, mediaType])
  @@map("media_item")
}

model Review {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  consumedDate DateTime  @map("consumed_date") @db.Date
  createdAt    DateTime? @default(now()) @map("created_date")
  favorited    Boolean   @default(false)
  review       String?
  stars        Int?
  userId       String    @map("user_id") @db.Uuid
  user         User      @relation(fields: [userId], references: [id])
  mediaItem    MediaItem @relation(fields: [mediaItemId], references: [id])
  mediaItemId  String    @map("media_item_id") @db.Uuid
  audiobook    Boolean   @default(false)
  onPlane      Boolean   @default(false) @map("on_plane")
  inTheater    Boolean   @default(false) @map("in_theater")

  @@map("review")
}

model MediaItemForLater {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id])
  mediaItemId String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")

  @@unique([mediaItemId, userId])
  @@map("media_item_for_later")
}

model TvSeries {
  id     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  apiId  String      @unique @map("api_id")
  title  String?
  season MediaItem[]

  @@map("tv_series")
}

enum CreatorType {
  DIRECTOR
  AUTHOR
  STUDIO

  @@map("creatortype")
}

model Creator {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  apiId       String      @map("api_id")
  creatorType CreatorType @map("creator_type")
  name        String?
  mediaItem   MediaItem[] @relation("MediaItemToCreator")

  @@unique([apiId, creatorType])
  @@map("creator")
}
